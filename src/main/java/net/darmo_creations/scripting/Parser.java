
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 02 12:39:32 CET 2017
//----------------------------------------------------

package net.darmo_creations.scripting;

import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import net.darmo_creations.scripting.statements.*;
import net.darmo_creations.scripting.expressions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 02 12:39:32 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\003\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\007\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\004\000" +
    "\002\010\003\000\002\011\004\000\002\011\006\000\002" +
    "\012\012\000\002\006\003\000\002\006\005\000\002\021" +
    "\002\000\002\021\003\000\002\022\003\000\002\022\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\013\011\000\002\013\015\000\002" +
    "\013\013\000\002\014\007\000\002\014\007\000\002\014" +
    "\015\000\002\020\002\000\002\020\003\000\002\004\002" +
    "\000\002\004\007\000\002\005\002\000\002\005\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\030\002\uffff\004\020\005\005\007\021\010" +
    "\006\011\024\014\026\022\010\065\017\066\012\067\016" +
    "\001\002\000\016\017\156\030\051\031\053\032\046\033" +
    "\052\034\050\001\002\000\004\022\143\001\002\000\012" +
    "\022\010\065\017\066\012\067\016\001\002\000\032\002" +
    "\ufffc\004\ufffc\005\ufffc\007\ufffc\010\ufffc\011\ufffc\014\ufffc" +
    "\022\ufffc\027\ufffc\065\ufffc\066\ufffc\067\ufffc\001\002\000" +
    "\012\022\010\065\017\066\012\067\016\001\002\000\004" +
    "\002\134\001\002\000\040\017\uffeb\021\uffeb\023\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\045\122" +
    "\054\123\055\124\056\125\057\121\060\120\001\002\000" +
    "\004\002\001\001\002\000\004\017\117\001\002\000\024" +
    "\017\uffea\021\uffea\023\uffea\026\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\001\002\000\024\017\uffec\021\uffec" +
    "\023\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\001\002\000\024\017\uffed\021\uffed\023\uffed\026\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\001\002\000" +
    "\004\066\114\001\002\000\012\022\010\065\017\066\012" +
    "\067\016\001\002\000\032\002\ufff8\004\ufff8\005\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\014\ufff8\022\ufff8\027\ufff8\065\ufff8" +
    "\066\ufff8\067\ufff8\001\002\000\024\017\uffe9\021\uffe9\023" +
    "\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\001\002\000\004\022\063\001\002\000\032\002\ufffb\004" +
    "\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\014\ufffb\022\ufffb" +
    "\027\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002\000\004\066" +
    "\032\001\002\000\032\002\ufffa\004\ufffa\005\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\014\ufffa\022\ufffa\027\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\001\002\000\032\002\uffff\004\020\005\005" +
    "\007\021\010\006\011\024\014\026\022\010\027\uffff\065" +
    "\017\066\012\067\016\001\002\000\006\002\ufffe\027\ufffe" +
    "\001\002\000\004\022\033\001\002\000\006\023\ufff2\066" +
    "\034\001\002\000\006\021\061\023\ufff0\001\002\000\004" +
    "\023\037\001\002\000\004\023\ufff1\001\002\000\004\026" +
    "\040\001\002\000\032\004\020\005\005\007\021\010\006" +
    "\011\024\014\026\015\042\022\010\027\uffff\065\017\066" +
    "\012\067\016\001\002\000\004\027\ufff4\001\002\000\012" +
    "\022\010\065\017\066\012\067\016\001\002\000\004\027" +
    "\044\001\002\000\032\002\ufff5\004\ufff5\005\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\014\ufff5\022\ufff5\027\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\001\002\000\016\017\047\030\051\031\053" +
    "\032\046\033\052\034\050\001\002\000\012\022\010\065" +
    "\017\066\012\067\016\001\002\000\004\027\ufff3\001\002" +
    "\000\012\022\010\065\017\066\012\067\016\001\002\000" +
    "\012\022\010\065\017\066\012\067\016\001\002\000\012" +
    "\022\010\065\017\066\012\067\016\001\002\000\012\022" +
    "\010\065\017\066\012\067\016\001\002\000\024\017\uffe1" +
    "\021\uffe1\023\uffe1\026\uffe1\030\uffe1\031\uffe1\032\046\033" +
    "\052\034\050\001\002\000\024\017\uffdf\021\uffdf\023\uffdf" +
    "\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\001" +
    "\002\000\024\017\uffe2\021\uffe2\023\uffe2\026\uffe2\030\uffe2" +
    "\031\uffe2\032\046\033\052\034\050\001\002\000\024\017" +
    "\uffde\021\uffde\023\uffde\026\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\001\002\000\024\017\uffe0\021\uffe0\023" +
    "\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\001\002\000\004\066\034\001\002\000\004\023\uffef\001" +
    "\002\000\006\004\064\017\uffd5\001\002\000\004\066\077" +
    "\001\002\000\004\017\066\001\002\000\014\017\uffd7\022" +
    "\010\065\017\066\012\067\016\001\002\000\004\017\071" +
    "\001\002\000\020\017\uffd6\023\uffd6\030\051\031\053\032" +
    "\046\033\052\034\050\001\002\000\014\022\010\023\uffd7" +
    "\065\017\066\012\067\016\001\002\000\004\023\073\001" +
    "\002\000\004\026\074\001\002\000\030\004\020\005\005" +
    "\007\021\010\006\011\024\014\026\022\010\027\uffff\065" +
    "\017\066\012\067\016\001\002\000\004\027\076\001\002" +
    "\000\032\002\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\014\uffd8\022\uffd8\027\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\001\002\000\004\045\100\001\002\000\012\022\010\065" +
    "\017\066\012\067\016\001\002\000\020\017\uffd3\021\102" +
    "\030\051\031\053\032\046\033\052\034\050\001\002\000" +
    "\004\066\104\001\002\000\004\017\uffd4\001\002\000\004" +
    "\045\105\001\002\000\012\022\010\065\017\066\012\067" +
    "\016\001\002\000\020\017\uffd3\021\102\030\051\031\053" +
    "\032\046\033\052\034\050\001\002\000\004\017\uffd2\001" +
    "\002\000\016\026\111\030\051\031\053\032\046\033\052" +
    "\034\050\001\002\000\030\004\020\005\005\007\021\010" +
    "\006\011\024\014\026\022\010\027\uffff\065\017\066\012" +
    "\067\016\001\002\000\004\027\113\001\002\000\032\002" +
    "\uffda\004\uffda\005\uffda\007\uffda\010\uffda\011\uffda\014\uffda" +
    "\022\uffda\027\uffda\065\uffda\066\uffda\067\uffda\001\002\000" +
    "\006\017\ufff7\045\115\001\002\000\012\022\010\065\017" +
    "\066\012\067\016\001\002\000\016\017\ufff6\030\051\031" +
    "\053\032\046\033\052\034\050\001\002\000\032\002\ufff9" +
    "\004\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\022" +
    "\ufff9\027\ufff9\065\ufff9\066\ufff9\067\ufff9\001\002\000\012" +
    "\022\010\065\017\066\012\067\016\001\002\000\012\022" +
    "\010\065\017\066\012\067\016\001\002\000\012\022\010" +
    "\065\017\066\012\067\016\001\002\000\012\022\010\065" +
    "\017\066\012\067\016\001\002\000\012\022\010\065\017" +
    "\066\012\067\016\001\002\000\012\022\010\065\017\066" +
    "\012\067\016\001\002\000\024\017\uffe5\021\uffe5\023\uffe5" +
    "\026\uffe5\030\051\031\053\032\046\033\052\034\050\001" +
    "\002\000\024\017\uffe6\021\uffe6\023\uffe6\026\uffe6\030\051" +
    "\031\053\032\046\033\052\034\050\001\002\000\024\017" +
    "\uffe7\021\uffe7\023\uffe7\026\uffe7\030\051\031\053\032\046" +
    "\033\052\034\050\001\002\000\024\017\uffe8\021\uffe8\023" +
    "\uffe8\026\uffe8\030\051\031\053\032\046\033\052\034\050" +
    "\001\002\000\024\017\uffe4\021\uffe4\023\uffe4\026\uffe4\030" +
    "\051\031\053\032\046\033\052\034\050\001\002\000\024" +
    "\017\uffe3\021\uffe3\023\uffe3\026\uffe3\030\051\031\053\032" +
    "\046\033\052\034\050\001\002\000\004\002\000\001\002" +
    "\000\016\023\136\030\051\031\053\032\046\033\052\034" +
    "\050\001\002\000\024\017\uffee\021\uffee\023\uffee\026\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\001\002\000" +
    "\016\026\140\030\051\031\053\032\046\033\052\034\050" +
    "\001\002\000\030\004\020\005\005\007\021\010\006\011" +
    "\024\014\026\022\010\027\uffff\065\017\066\012\067\016" +
    "\001\002\000\004\027\142\001\002\000\032\002\uffd9\004" +
    "\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9\014\uffd9\022\uffd9" +
    "\027\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002\000\012\022" +
    "\010\065\017\066\012\067\016\001\002\000\016\023\145" +
    "\030\051\031\053\032\046\033\052\034\050\001\002\000" +
    "\004\026\146\001\002\000\030\004\020\005\005\007\021" +
    "\010\006\011\024\014\026\022\010\027\uffff\065\017\066" +
    "\012\067\016\001\002\000\004\027\150\001\002\000\034" +
    "\002\uffdd\004\uffdd\005\uffdd\006\151\007\uffdd\010\uffdd\011" +
    "\uffdd\014\uffdd\022\uffdd\027\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\001\002\000\006\005\005\026\152\001\002\000\030\004" +
    "\020\005\005\007\021\010\006\011\024\014\026\022\010" +
    "\027\uffff\065\017\066\012\067\016\001\002\000\032\002" +
    "\uffdb\004\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb" +
    "\022\uffdb\027\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000" +
    "\004\027\155\001\002\000\032\002\uffdc\004\uffdc\005\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\014\uffdc\022\uffdc\027\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\001\002\000\032\002\ufffd\004\ufffd" +
    "\005\ufffd\007\ufffd\010\ufffd\011\ufffd\014\ufffd\022\ufffd\027" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\030\002\010\003\012\007\027\010\006\011" +
    "\013\012\021\013\024\014\026\015\003\016\014\017\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\136\016\014\017\022\001\001\000\002\001\001\000\010" +
    "\015\134\016\014\017\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\107\016\014\017\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\030" +
    "\007\027\010\006\011\013\012\021\013\024\014\026\015" +
    "\003\016\014\017\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\034\022\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\040\006\042\007\027\010\006\011\013\012" +
    "\021\013\024\014\026\015\003\016\014\017\022\001\001" +
    "\000\002\001\001\000\010\015\044\016\014\017\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\057\016\014\017\022\001\001\000\002\001" +
    "\001\000\010\015\056\016\014\017\022\001\001\000\010" +
    "\015\055\016\014\017\022\001\001\000\010\015\054\016" +
    "\014\017\022\001\001\000\010\015\053\016\014\017\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\061" +
    "\001\001\000\002\001\001\000\004\004\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\067\016\014" +
    "\017\022\020\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\067\016\014\017\022\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\074\007" +
    "\027\010\006\011\013\012\021\013\024\014\026\015\003" +
    "\016\014\017\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\100\016\014\017\022" +
    "\001\001\000\004\005\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\105\016\014" +
    "\017\022\001\001\000\004\005\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\111\007\027\010\006" +
    "\011\013\012\021\013\024\014\026\015\003\016\014\017" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\115\016\014\017\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\132\016\014" +
    "\017\022\001\001\000\010\015\131\016\014\017\022\001" +
    "\001\000\010\015\130\016\014\017\022\001\001\000\010" +
    "\015\127\016\014\017\022\001\001\000\010\015\126\016" +
    "\014\017\022\001\001\000\010\015\125\016\014\017\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\140\007\027\010\006\011\013" +
    "\012\021\013\024\014\026\015\003\016\014\017\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\143" +
    "\016\014\017\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\146\007\027\010\006\011\013\012\021" +
    "\013\024\014\026\015\003\016\014\017\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\152\001\001" +
    "\000\026\003\153\007\027\010\006\011\013\012\021\013" +
    "\024\014\026\015\003\016\014\017\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  // TODO add symbols table

  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");

    if (info instanceof Symbol) {
      Symbol s = (Symbol) info;

      if (s.left >= 0) {
        m.append(" at line ").append(s.left + 1);
        if (s.right >= 0)
          m.append(", column ").append(s.right + 1);
      }
    }
    m.append(" : ").append(message);

    throw new RuntimeException(m.toString());
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // init_for_seq ::= COMMA ID EQ expr init_for_seq 
            {
              List<Statement> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_for_seq",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // init_for_seq ::= 
            {
              List<Statement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_for_seq",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // init_for ::= KW_LET ID EQ expr init_for_seq 
            {
              List<Statement> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_for",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // init_for ::= 
            {
              List<Statement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_for",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_opt ::= expr 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_opt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_opt ::= 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_opt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // loop ::= KW_FOR LPAREN init_for SEMI_COLON expr_opt SEMI_COLON expr_opt RPAREN LCURLY stmt_list RCURLY 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // loop ::= KW_UNTIL expr LCURLY stmt_list RCURLY 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // loop ::= KW_WHILE expr LCURLY stmt_list RCURLY 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // test ::= KW_IF LPAREN expr RPAREN LCURLY stmt_list RCURLY KW_ELSE test 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // test ::= KW_IF LPAREN expr RPAREN LCURLY stmt_list RCURLY KW_ELSE LCURLY stmt_list RCURLY 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // test ::= KW_IF LPAREN expr RPAREN LCURLY stmt_list RCURLY 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arith_op ::= expr PERCENT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arith_op",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arith_op ::= expr SLASH expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arith_op",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arith_op ::= expr STAR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arith_op",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arith_op ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arith_op",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arith_op ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arith_op",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assign ::= ID PERCENT_EQ expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assign ::= ID SLASH_EQ expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assign ::= ID STAR_EQ expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign ::= ID MINUS_EQ expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assign ::= ID PLUS_EQ expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assign ::= ID EQ expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= assign 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= arith_op 
            {
              Expression RESULT =null;
		int opsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ops = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= ID 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= STRING 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= NUMBER 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // args_decl ::= ID COMMA args_decl 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // args_decl ::= ID 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // args_opt ::= args_decl 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // args_opt ::= 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_list_function ::= KW_RETURN expr SEMI_COLON 
            {
              List<Statement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list_function",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list_function ::= stmt_list 
            {
              List<Statement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list_function",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_decl ::= KW_FUNCTION ID LPAREN args_opt RPAREN LCURLY stmt_list_function RCURLY 
            {
              Statement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<String> args = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= KW_LET ID EQ expr 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl ::= KW_LET ID 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= function_decl 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= var_decl SEMI_COLON 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement v = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= loop 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= test 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= decl 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= expr SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt stmt_list 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(0, s); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_list 
            {
              Object RESULT =null;
		 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

